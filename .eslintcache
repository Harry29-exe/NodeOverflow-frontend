[{"C:\\Users\\Kamil\\WebstormProjects\\node-image-editor-react\\src\\stories\\Button.stories.tsx":"1","C:\\Users\\Kamil\\WebstormProjects\\node-image-editor-react\\src\\my-stories\\NodeModule.stories.tsx":"2","C:\\Users\\Kamil\\WebstormProjects\\node-image-editor-react\\src\\stories\\Page.stories.tsx":"3","C:\\Users\\Kamil\\WebstormProjects\\node-image-editor-react\\src\\stories\\Header.stories.tsx":"4","C:\\Users\\Kamil\\WebstormProjects\\node-image-editor-react\\src\\my-stories\\NodeCanvas.stories.tsx":"5","C:\\Users\\Kamil\\WebstormProjects\\node-image-editor-react\\src\\modeules\\node-module\\NodeCanvasViewProperties.ts":"6","C:\\Users\\Kamil\\WebstormProjects\\node-image-editor-react\\src\\modeules\\node-module\\NodeStorage.ts":"7","C:\\Users\\Kamil\\WebstormProjects\\node-image-editor-react\\src\\stories\\Header.tsx":"8","C:\\Users\\Kamil\\WebstormProjects\\node-image-editor-react\\src\\modeules\\node-module\\NodeCanvas.tsx":"9","C:\\Users\\Kamil\\WebstormProjects\\node-image-editor-react\\src\\node-components\\Link.tsx":"10","C:\\Users\\Kamil\\WebstormProjects\\node-image-editor-react\\src\\node-components\\Segment.tsx":"11","C:\\Users\\Kamil\\WebstormProjects\\node-image-editor-react\\src\\stories\\Button.tsx":"12","C:\\Users\\Kamil\\WebstormProjects\\node-image-editor-react\\src\\node-components\\Node.tsx":"13","C:\\Users\\Kamil\\WebstormProjects\\node-image-editor-react\\src\\node-components\\NodeValueFunction.ts":"14","C:\\Users\\Kamil\\WebstormProjects\\node-image-editor-react\\src\\node-components\\Port.tsx":"15","C:\\Users\\Kamil\\WebstormProjects\\node-image-editor-react\\src\\node-components\\LinkTemporary.tsx":"16","C:\\Users\\Kamil\\WebstormProjects\\node-image-editor-react\\src\\stories\\Page.tsx":"17","C:\\Users\\Kamil\\WebstormProjects\\node-image-editor-react\\src\\node-components\\complete-nodes\\ImageMixNode.ts":"18","C:\\Users\\Kamil\\WebstormProjects\\node-image-editor-react\\src\\modeules\\node-module\\NodeModule.tsx":"19","C:\\Users\\Kamil\\WebstormProjects\\node-image-editor-react\\src\\node-components\\complete-nodes\\OutputNodeModel.ts":"20","C:\\Users\\Kamil\\WebstormProjects\\node-image-editor-react\\src\\node-components\\complete-nodes\\ResizeNode.ts":"21","C:\\Users\\Kamil\\WebstormProjects\\node-image-editor-react\\src\\node-components\\segment-implementacions\\NumericSliderSegment.tsx":"22","C:\\Users\\Kamil\\WebstormProjects\\node-image-editor-react\\src\\node-components\\segment-implementacions\\InputSegment.tsx":"23","C:\\Users\\Kamil\\WebstormProjects\\node-image-editor-react\\src\\node-components\\segment-implementacions\\OutputSegment.tsx":"24","C:\\Users\\Kamil\\WebstormProjects\\node-image-editor-react\\src\\node-components\\segment-implementacions\\ImageSegment.tsx":"25","C:\\Users\\Kamil\\WebstormProjects\\node-image-editor-react\\src\\modeules\\node-module\\RenderWindow.tsx":"26","C:\\Users\\Kamil\\WebstormProjects\\node-image-editor-react\\src\\node-components\\segment-implementacions\\OptionSegment.tsx":"27","C:\\Users\\Kamil\\WebstormProjects\\node-image-editor-react\\src\\modeules\\node-module\\NodeControlPanel.tsx":"28","C:\\Users\\Kamil\\WebstormProjects\\node-image-editor-react\\src\\node-components\\complete-nodes\\CompleteNodeList.ts":"29","C:\\Users\\Kamil\\WebstormProjects\\node-image-editor-react\\src\\node-components\\segment-implementacions\\NumberSegment.tsx":"30","C:\\Users\\Kamil\\WebstormProjects\\node-image-editor-react\\src\\App.tsx":"31","C:\\Users\\Kamil\\WebstormProjects\\node-image-editor-react\\src\\components\\Button.tsx":"32","C:\\Users\\Kamil\\WebstormProjects\\node-image-editor-react\\src\\components\\UnfoldingButton.tsx":"33","C:\\Users\\Kamil\\WebstormProjects\\node-image-editor-react\\src\\node-components\\complete-nodes\\NodeFactory.ts":"34","C:\\Users\\Kamil\\WebstormProjects\\node-image-editor-react\\src\\components\\Navbar.tsx":"35","C:\\Users\\Kamil\\WebstormProjects\\node-image-editor-react\\src\\index.tsx":"36","C:\\Users\\Kamil\\WebstormProjects\\node-image-editor-react\\src\\reportWebVitals.ts":"37","C:\\Users\\Kamil\\WebstormProjects\\node-image-editor-react\\src\\node-components\\complete-nodes\\ImageInputNode.ts":"38","C:\\Users\\Kamil\\WebstormProjects\\node-image-editor-react\\src\\node-components\\segment-implementacions\\PlaceholderSegment.tsx":"39","C:\\Users\\Kamil\\WebstormProjects\\node-image-editor-react\\src\\node-components\\NodeModel.ts":"40"},{"size":862,"mtime":1614025700576,"results":"41","hashOfConfig":"42"},{"size":2408,"mtime":1614384489651,"results":"43","hashOfConfig":"42"},{"size":632,"mtime":1614025700580,"results":"44","hashOfConfig":"42"},{"size":532,"mtime":1614025700577,"results":"45","hashOfConfig":"42"},{"size":1921,"mtime":1614082606255,"results":"46","hashOfConfig":"42"},{"size":457,"mtime":1614025700525,"results":"47","hashOfConfig":"42"},{"size":8203,"mtime":1614444883590,"results":"48","hashOfConfig":"42"},{"size":1718,"mtime":1614025700577,"results":"49","hashOfConfig":"42"},{"size":6465,"mtime":1614444883587,"results":"50","hashOfConfig":"42"},{"size":3315,"mtime":1614025700532,"results":"51","hashOfConfig":"42"},{"size":8584,"mtime":1614444883605,"results":"52","hashOfConfig":"42"},{"size":1361,"mtime":1614025700576,"results":"53","hashOfConfig":"42"},{"size":6130,"mtime":1614444883599,"results":"54","hashOfConfig":"42"},{"size":317,"mtime":1614444883601,"results":"55","hashOfConfig":"42"},{"size":4275,"mtime":1614444883604,"results":"56","hashOfConfig":"42"},{"size":1918,"mtime":1614025700532,"results":"57","hashOfConfig":"42"},{"size":2899,"mtime":1614025700580,"results":"58","hashOfConfig":"42"},{"size":6612,"mtime":1614444883614,"results":"59","hashOfConfig":"42"},{"size":4052,"mtime":1614444883589,"results":"60","hashOfConfig":"42"},{"size":941,"mtime":1614444883616,"results":"61","hashOfConfig":"42"},{"size":2513,"mtime":1614444883617,"results":"62","hashOfConfig":"42"},{"size":4963,"mtime":1614444883622,"results":"63","hashOfConfig":"42"},{"size":980,"mtime":1614174682002,"results":"64","hashOfConfig":"42"},{"size":986,"mtime":1614174681985,"results":"65","hashOfConfig":"42"},{"size":6138,"mtime":1614444883619,"results":"66","hashOfConfig":"42"},{"size":3155,"mtime":1614444883593,"results":"67","hashOfConfig":"42"},{"size":7463,"mtime":1614444883624,"results":"68","hashOfConfig":"42"},{"size":3672,"mtime":1614117544113,"results":"69","hashOfConfig":"42"},{"size":601,"mtime":1614280496723,"results":"70","hashOfConfig":"42"},{"size":4917,"mtime":1614444883621,"results":"71","hashOfConfig":"42"},{"size":1539,"mtime":1614444883581,"results":"72","hashOfConfig":"42"},{"size":1725,"mtime":1614025700517,"results":"73","hashOfConfig":"42"},{"size":4199,"mtime":1614025700520,"results":"74","hashOfConfig":"42"},{"size":348,"mtime":1614444883607,"results":"75","hashOfConfig":"42"},{"size":1130,"mtime":1614444883584,"results":"76","hashOfConfig":"42"},{"size":526,"mtime":1614025700523,"results":"77","hashOfConfig":"42"},{"size":478,"mtime":1614025700548,"results":"78","hashOfConfig":"42"},{"size":1247,"mtime":1614444883612,"results":"79","hashOfConfig":"42"},{"size":823,"mtime":1614347520655,"results":"80","hashOfConfig":"42"},{"size":7860,"mtime":1614444883600,"results":"81","hashOfConfig":"42"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},"1hczg59",{"filePath":"85","messages":"86","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"84"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"84"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"97"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"97"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"139","usedDeprecatedRules":"97"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"150","usedDeprecatedRules":"97"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"167","usedDeprecatedRules":"97"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"170","usedDeprecatedRules":"97"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"173","usedDeprecatedRules":"97"},"C:\\Users\\Kamil\\WebstormProjects\\node-image-editor-react\\src\\stories\\Button.stories.tsx",[],["174","175"],"C:\\Users\\Kamil\\WebstormProjects\\node-image-editor-react\\src\\my-stories\\NodeModule.stories.tsx",["176"],"import NodeModule from \"../modeules/node-module/NodeModule\";\r\nimport {CreateImageInputNode} from \"../node-components/complete-nodes/ImageInputNode\";\r\nimport {Meta, Story} from \"@storybook/react/types-6-0\";\r\nimport {CreateOutputNode} from \"../node-components/complete-nodes/OutputNodeModel\";\r\nimport {NodeModel} from \"../node-components/Node\";\r\nimport {LinkModel} from \"../node-components/Link\";\r\nimport {CreateImageMixNode} from \"../node-components/complete-nodes/ImageMixNode\";\r\n\r\nexport default {\r\n    title: \"Node/Wrappers/Node Module\",\r\n    component: NodeModule,\r\n\r\n    argTypes: {\r\n        nodes: {\r\n            description: \"List of NodeModel objects representing nodes which \" +\r\n                \"NodeModule should contain at it's launch\",\r\n            table: {\r\n                summary: \"NodeModel[]\",\r\n                detail: \"List of NodeModel objects \"\r\n            },\r\n            control: {\r\n                type: null\r\n            },\r\n            defaultValue: []\r\n        },\r\n        links: {\r\n            description: \"List of LinkModel objects representing nodes which \" +\r\n                \"NodeModule should contain at it's launch\",\r\n            table: {\r\n                summary: \"LinkModel[]\",\r\n                detail: \"List of LinkModel objects\"\r\n            },\r\n            control: {\r\n                type: null\r\n            },\r\n            defaultValue: []\r\n\r\n        }\r\n    },\r\n    parameters: {\r\n        docs: {\r\n            //Prevents from circle JSON parsing\r\n            source: {\r\n                type: 'code'\r\n            }\r\n        }\r\n    }\r\n} as Meta\r\n\r\nconst exampleNodeList = [CreateImageInputNode(1, -360, 100),\r\n    CreateImageInputNode(2, -360, -60),\r\n    CreateOutputNode(3, 220, 80),\r\n    CreateImageMixNode(4, 0, 0),\r\n]\r\n\r\n// const exampleLinkList = [\r\n//     new LinkModel()\r\n// ]\r\n\r\nconst NodeModuleTemplate: Story<{ nodes?: NodeModel[], links?: LinkModel[] }> = (args) =>\r\n    <div style={{width: \"70vw\", height: \"80vh\", margin: 0, padding: 0, backgroundColor: \"darkgray\"}}>\r\n        <NodeModule {...args}/>\r\n    </div>\r\n\r\nexport const Primary = NodeModuleTemplate.bind({});\r\nPrimary.args = {\r\n    nodes: exampleNodeList,\r\n    links: []\r\n}\r\n\r\nexport const Empty = NodeModuleTemplate.bind({});\r\n\r\nexport const BasicInputOutput = NodeModuleTemplate.bind({});\r\nBasicInputOutput.args = {\r\n    nodes: [CreateImageInputNode(0, -150, 0), CreateOutputNode(1, 100, 0)]\r\n}\r\n\r\n\r\n","C:\\Users\\Kamil\\WebstormProjects\\node-image-editor-react\\src\\stories\\Page.stories.tsx",[],"C:\\Users\\Kamil\\WebstormProjects\\node-image-editor-react\\src\\stories\\Header.stories.tsx",[],"C:\\Users\\Kamil\\WebstormProjects\\node-image-editor-react\\src\\my-stories\\NodeCanvas.stories.tsx",["177"],"import NodeCanvas, {NodeCanvasProps} from \"../modeules/node-module/NodeCanvas\";\r\nimport {DefaultNodeStorage} from \"../modeules/node-module/NodeStorage\";\r\nimport {NodeCanvasViewProperties} from \"../modeules/node-module/NodeCanvasViewProperties\";\r\nimport {Story} from \"@storybook/react/types-6-0\";\r\n\r\nexport default {\r\n    title: \"Node/Wrappers/Node Canvas\",\r\n    component: NodeCanvas,\r\n\r\n    argTypes: {\r\n        storage: {\r\n            //TODO\r\n            description: \"storage - place where nods find home\",\r\n            table: {\r\n                type: {\r\n                    summary: \"NodeStorage\",\r\n                    detail: \"Object implementing NodeStorage interface usually DefaultNodeStorage\"\r\n                }\r\n            },\r\n            control: {\r\n                type: null\r\n            }\r\n        },\r\n\r\n        viewProps: {\r\n            description: \"It is basically state of NodeCanvas wrapped into object contain all transforms.\" +\r\n                \" It needs to be passed by parent component because other component perform actions \" +\r\n                \"based on it's values, e.g. NodeControlPanel adds new nodes to canvas in the\" +\r\n                \" way that they appearing on canvas in cursor position.\",\r\n            table: {\r\n                type: {\r\n                    summary: \"NodeCanvasViewProperties\",\r\n                    detail: \"Information about canvas transforms\"\r\n                }\r\n            },\r\n            control: {\r\n                type: null\r\n            }\r\n        }\r\n    },\r\n\r\n    docs: {}\r\n}\r\n\r\nconst nodeCanvasTemplate: Story<NodeCanvasProps> = (args) =>\r\n    <div style={{width: \"80vw\", height: \"80vh\", margin: 0, padding: 0,}}>\r\n        <NodeCanvas {...args}/>;\r\n    </div>\r\n\r\nexport const NodeCanvasExample = nodeCanvasTemplate.bind({});\r\n\r\nNodeCanvasExample.args = {\r\n    storage: new DefaultNodeStorage(),\r\n    viewProps: new NodeCanvasViewProperties(1, 0, 0, 0, 0)\r\n}","C:\\Users\\Kamil\\WebstormProjects\\node-image-editor-react\\src\\modeules\\node-module\\NodeCanvasViewProperties.ts",[],["178","179"],"C:\\Users\\Kamil\\WebstormProjects\\node-image-editor-react\\src\\modeules\\node-module\\NodeStorage.ts",["180"],"import {PortType, SegmentModel} from \"../../node-components/Segment\";\r\nimport {LinkModel} from \"../../node-components/Link\";\r\nimport {NodeModel} from \"../../node-components/NodeModel\";\r\n\r\nexport interface NodeStorageListener {\r\n    (nodes: NodeModel[], links: LinkModel[]): void;\r\n}\r\n\r\nexport interface NodeStorage {\r\n\r\n    //this returns listenerId\r\n    addUpdateListener(listener: NodeStorageListener): number;\r\n\r\n    removeUpdateListener(listenerId: number): void;\r\n\r\n    handleAttemptToAddLink(outputSegment: SegmentModel<any>, targetX: number, targetY: number): LinkModel | null;\r\n\r\n    handleAddLink(link: LinkModel): void;\r\n\r\n    handleAddNode(node: NodeModel): void;\r\n\r\n    handleUpdateNode(node: NodeModel): void;\r\n\r\n    handleRemoveLink(link: LinkModel): void;\r\n\r\n    handleRemoveLinks(parent: SegmentModel<any>): void;\r\n\r\n    handleRemoveNode(node: NodeModel): void;\r\n\r\n    handleRemoveNode(nodeId: number): void;\r\n\r\n    getNextNodeId(): number;\r\n\r\n    getNodes(): NodeModel[];\r\n\r\n    getLinks(): LinkModel[];\r\n}\r\n\r\nexport class DefaultNodeStorage implements NodeStorage {\r\n    private nextNodeId = 0;\r\n    private links: LinkModel[];\r\n    private nodes: NodeModel[];\r\n    private readonly listeners: NodeStorageListener[];\r\n\r\n    constructor(nodes?: NodeModel[], links?: LinkModel[], listeners?: NodeStorageListener[]) {\r\n        if (nodes) {\r\n            this.nodes = nodes;\r\n            let biggestNodeId = 0;\r\n            nodes.forEach(n => biggestNodeId = biggestNodeId > n.id ? biggestNodeId : n.id);\r\n            this.nextNodeId = biggestNodeId + 1;\r\n        } else {\r\n            this.nodes = [];\r\n        }\r\n\r\n        if (links) {\r\n            this.links = links;\r\n            links.forEach(link => {\r\n                link.outputSegment.parent.addLink(link);\r\n                link.inputSegment.parent.addLink(link);\r\n            })\r\n        } else {\r\n            this.links = [];\r\n        }\r\n        this.listeners = listeners ? listeners : [];\r\n    }\r\n\r\n    getLinks(): LinkModel[] {\r\n        return this.links;\r\n    }\r\n\r\n    getNodes(): NodeModel[] {\r\n        return this.nodes;\r\n    }\r\n\r\n    addUpdateListener(listener: NodeStorageListener): number {\r\n        return this.listeners.push(listener);\r\n    }\r\n\r\n    removeUpdateListener(listenerId: number): void {\r\n        delete this.listeners[listenerId];\r\n    }\r\n\r\n    handleAddLink(link: LinkModel): void {\r\n        let newLinkList = [link];\r\n        this.links = newLinkList.concat(this.links);\r\n        this.callListeners();\r\n    }\r\n\r\n    handleAddNode(node: NodeModel): void {\r\n        if (node.id === this.nextNodeId) {\r\n            let newNodeList = [node];\r\n            this.nodes = newNodeList.concat(this.nodes);\r\n            this.nextNodeId++;\r\n            this.callListeners();\r\n        } else {\r\n            let nodeIdExist: boolean = false;\r\n            this.nodes.forEach(n => nodeIdExist = nodeIdExist ? nodeIdExist : n.id === node.id);\r\n            if (nodeIdExist) {\r\n                throw new Error(\"Can not add node with id with is already assigned\");\r\n            } else {\r\n                let newNodeList = [node];\r\n                this.nodes = newNodeList.concat(this.nodes);\r\n                this.nextNodeId = this.nextNodeId > node.id ? this.nextNodeId : node.id + 1;\r\n                this.callListeners();\r\n            }\r\n        }\r\n    }\r\n\r\n    handleAttemptToAddLink(outputSegment: SegmentModel<any>, targetX: number, targetY: number): LinkModel | null {\r\n        let inputSegment: SegmentModel<any> | null = null;\r\n        let nodes = this.nodes;\r\n        let i = 0;\r\n        while (i < nodes.length && inputSegment == null) {\r\n            for (let j = 0; j < nodes[i].segments.length; j++) {\r\n                if (nodes[i].segments[j].portType !== PortType.INPUT) {\r\n                    continue;\r\n                }\r\n                let portSize = nodes[i].dimensions.segmentHeight;\r\n                let xMin = nodes[i].segments[j].calcPortLeftOffsetToCenter() - portSize / 2;\r\n                let xMax = xMin + portSize;\r\n                let yMin = nodes[i].segments[j].calcPortTopOffsetToCenter() - portSize / 2;\r\n                let yMax = yMin + portSize;\r\n                if (targetX >= xMin && targetX <= xMax &&\r\n                    targetY >= yMin && targetY <= yMax) {\r\n                    inputSegment = nodes[i].segments[j];\r\n                    break;\r\n                }\r\n            }\r\n            i++;\r\n        }\r\n\r\n        if (inputSegment != null) {\r\n            this.handleRemoveLinks(inputSegment);\r\n            let newLink = new LinkModel(outputSegment, inputSegment);\r\n            outputSegment.parent.addLink(newLink);\r\n            inputSegment.parent.addLink(newLink);\r\n            this.links.push(newLink);\r\n\r\n            this.callListeners();\r\n            return newLink;\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    handleRemoveLink(link: LinkModel): void {\r\n        let links = this.links.filter(e => e !== null);\r\n        for (let i = 0; i < links.length; i++) {\r\n            let l = links[i];\r\n            if (l.equals(link)) {\r\n                l.outputSegment.parent.removeLink(l);\r\n                l.inputSegment.parent.removeLink(l);\r\n                delete links[i];\r\n                break;\r\n            }\r\n        }\r\n        this.links = links.filter(l => l !== null && l !== undefined);\r\n        this.callListeners();\r\n    }\r\n\r\n    handleRemoveLinks(parent: SegmentModel<any>): void {\r\n        let links = this.links.filter(e => e !== null);\r\n        for (let i = 0; i < links.length; i++) {\r\n            let l = links[i];\r\n            if ((l.inputSegment.index === parent.index && l.inputSegment.parent.id === parent.parent.id) ||\r\n                (l.outputSegment.index === parent.index && l.outputSegment.parent.id === parent.parent.id)) {\r\n                l.outputSegment.parent.removeLink(l);\r\n                l.inputSegment.parent.removeLink(l);\r\n                delete links[i];\r\n            }\r\n        }\r\n        this.links = links.filter(l => l !== null && l !== undefined);\r\n        this.callListeners();\r\n    }\r\n\r\n    handleRemoveNode(node: NodeModel): void;\r\n    handleRemoveNode(nodeId: number): void;\r\n    handleRemoveNode(node: NodeModel | number): void {\r\n        let nodeId: number = 0;\r\n        if (typeof node == \"number\") {\r\n            nodeId = node;\r\n        } else {\r\n            nodeId = node.id;\r\n        }\r\n\r\n        for (let i = 0; i < this.nodes.length; i++) {\r\n            if (this.nodes[i].id === nodeId) {\r\n                this.removeLinks(this.nodes[i].links);\r\n                delete this.nodes[i];\r\n                break;\r\n            }\r\n        }\r\n        this.nodes = this.nodes.filter(n => n !== null && n !== undefined);\r\n        this.callListeners();\r\n    }\r\n\r\n    handleUpdateNode(updatedNode: NodeModel): void {\r\n        let nodes = this.nodes;\r\n        let nodeIndex = 0;\r\n        for (let i = 0; i < nodes.length; i++) {\r\n            if (nodes[i].id === updatedNode.id) {\r\n                nodeIndex = i;\r\n                break;\r\n            }\r\n        }\r\n\r\n        for (nodeIndex; nodeIndex < nodes.length - 1; nodeIndex++) {\r\n            nodes[nodeIndex] = nodes[nodeIndex + 1];\r\n        }\r\n        nodes[nodes.length - 1] = updatedNode;\r\n        this.callListeners();\r\n    }\r\n\r\n    getNextNodeId(): number {\r\n        return this.nextNodeId;\r\n    }\r\n\r\n    private callListeners() {\r\n        this.listeners.forEach(l => l(this.nodes, this.links));\r\n    }\r\n\r\n    private removeLinks(linksToRemove: LinkModel[]) {\r\n        let links = this.links;\r\n        let tempLink: LinkModel;\r\n        for (let i = 0; i < links.length; i++) {\r\n            tempLink = links[i];\r\n            for (let j = 0; j < linksToRemove.length; j++) {\r\n                if (linksToRemove[j] !== undefined && tempLink.equals(linksToRemove[j])) {\r\n                    tempLink.inputSegment.parent.removeLink(tempLink);\r\n                    tempLink.outputSegment.parent.removeLink(tempLink);\r\n                    delete links[i];\r\n                    delete linksToRemove[j];\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        this.links = links.filter(l => l !== null && l != undefined);\r\n    }\r\n\r\n}","C:\\Users\\Kamil\\WebstormProjects\\node-image-editor-react\\src\\stories\\Header.tsx",[],"C:\\Users\\Kamil\\WebstormProjects\\node-image-editor-react\\src\\modeules\\node-module\\NodeCanvas.tsx",["181","182","183"],"import React, {Component} from 'react';\r\nimport Node, {NodeModel} from \"../../node-components/Node\";\r\nimport Link, {LinkModel} from \"../../node-components/Link\";\r\nimport {NodeStorage, NodeStorageListener} from \"./NodeStorage\";\r\nimport {NodeCanvasViewProperties} from \"./NodeCanvasViewProperties\";\r\nimport \"./NodeCanvas.css\"\r\n\r\nexport const PressedKeys: { keys: string[] } = {\r\n    keys: []\r\n}\r\n\r\nexport class NodeCanvasState {\r\n    public viewProperties: NodeCanvasViewProperties;\r\n    public nodes: NodeModel[];\r\n    public links: LinkModel[];\r\n\r\n    constructor(viewProperties: NodeCanvasViewProperties, nodes: NodeModel[], links: LinkModel[]) {\r\n        this.viewProperties = viewProperties;\r\n        this.nodes = nodes;\r\n        this.links = links;\r\n    }\r\n}\r\n\r\nexport class NodeCanvasProps {\r\n    storage: NodeStorage;\r\n    viewProps: NodeCanvasViewProperties\r\n\r\n    constructor(storage: NodeStorage, viewProps: NodeCanvasViewProperties) {\r\n        this.storage = storage;\r\n        this.viewProps = viewProps;\r\n    }\r\n}\r\n\r\nclass NodeCanvas extends Component<NodeCanvasProps, NodeCanvasState> {\r\n    protected storageListener: NodeStorageListener = ((nodes, links) =>\r\n        this.setState({nodes: nodes, links: links}));\r\n    protected canvasRef = React.createRef<HTMLDivElement>();\r\n\r\n    constructor(props: NodeCanvasProps) {\r\n        super(props);\r\n        props.storage.addUpdateListener(this.storageListener);\r\n        this.state = new NodeCanvasState(props.viewProps, props.storage.getNodes(), props.storage.getLinks());\r\n    }\r\n\r\n    handleClick = (event: any) => {\r\n        let mouseX = event.clientX;\r\n        let mouseY = event.clientY;\r\n        const transform = (event: any) => {\r\n            event.preventDefault();\r\n            this.state.viewProperties.shiftLeft =\r\n                this.state.viewProperties.shiftLeft - (mouseX - event.clientX) / this.state.viewProperties.scale;\r\n            this.state.viewProperties.shiftTop =\r\n                this.state.viewProperties.shiftTop - (mouseY - event.clientY) / this.state.viewProperties.scale;\r\n\r\n            this.setState({\r\n                viewProperties: this.state.viewProperties\r\n            });\r\n            mouseX = event.clientX;\r\n            mouseY = event.clientY;\r\n        }\r\n\r\n        window.addEventListener(\"mousemove\", transform);\r\n        window.addEventListener(\"mouseup\",\r\n            () => window.removeEventListener(\"mousemove\", transform));\r\n    }\r\n\r\n    handleScroll = (event: any) => {\r\n        let offset = event.deltaMode === 0 ? event.deltaY : event.deltaY * 50;\r\n        let newScale = this.state.viewProperties.scale - offset * 0.001;\r\n        newScale = newScale < 0.15 ? 0.15 : newScale > 20 ? 20 : newScale;\r\n\r\n        this.state.viewProperties.scale = newScale;\r\n        this.setState({\r\n            viewProperties: this.state.viewProperties\r\n        });\r\n    }\r\n\r\n    handleKeyDown = (event: any) => {\r\n        if (!PressedKeys.keys.includes(event.code)) {\r\n            PressedKeys.keys.push(event.code);\r\n        }\r\n    }\r\n    handleKeyUp = (event: any) => {\r\n        PressedKeys.keys = PressedKeys.keys.filter(k => k !== event.code);\r\n    }\r\n\r\n    preventScroll = (event: any) => {\r\n        event.preventDefault(event);\r\n        event.stopPropagation();\r\n        return false;\r\n    }\r\n\r\n    disableScroll = (event: any) => {\r\n        window.addEventListener(\"mousewheel\", this.preventScroll, {passive: false});\r\n    }\r\n\r\n    enableScroll = (event: any) => {\r\n        window.removeEventListener(\"mousewheel\", this.preventScroll);\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        if (this.canvasRef.current) {\r\n            let mainDiv = this.canvasRef.current;\r\n            let mainDivBox = mainDiv.getBoundingClientRect();\r\n            this.props.viewProps.width = mainDivBox.width;\r\n            this.props.viewProps.height = mainDivBox.height;\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (this.canvasRef.current) {\r\n            let mainDiv = this.canvasRef.current;\r\n            let mainDivBox = mainDiv.getBoundingClientRect();\r\n            this.props.viewProps.width = mainDivBox.width;\r\n            this.props.viewProps.height = mainDivBox.height;\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n        let key = 0;\r\n        return (\r\n            <div onMouseEnter={this.disableScroll} onMouseLeave={this.enableScroll}\r\n                 onKeyDown={this.handleKeyDown} onKeyUp={this.handleKeyUp} tabIndex={0}\r\n                 ref={this.canvasRef} className={\"Background\"} onWheel={this.handleScroll}\r\n                 style={{\r\n                     width: \"100%\",\r\n                     height: \"100%\",\r\n                     overflow: \"hidden\",\r\n                     position: \"absolute\",\r\n                     top: 0,\r\n                     left: 0,\r\n                     margin: 0,\r\n                     padding: 0\r\n                 }}\r\n                 draggable={\"false\"} unselectable={\"on\"}>\r\n\r\n                <div style={{\r\n                    position: \"absolute\",\r\n                    backgroundColor: \"#ddaaaa\",\r\n                    left: \"50%\",\r\n                    top: \"50%\",\r\n                    transform: `scale(${this.state.viewProperties.scale}) translate(${this.state.viewProperties.shiftLeft}px, \r\n                    ${this.state.viewProperties.shiftTop}px)`\r\n                }}>\r\n\r\n                    {this.state.nodes.map(n => <Node\r\n                        key={n.id} node={n} canvasViewProps={this.state.viewProperties} storage={this.props.storage}/>)}\r\n\r\n                    {\r\n                        this.state.links.map(l =>\r\n                            <Link link={l} key={key++}/>\r\n                        )}\r\n                </div>\r\n\r\n                <div onMouseDown={this.handleClick} style={{width: \"inherit\", height: \"inherit\"}}>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default NodeCanvas;\r\n\r\n// createVisibleNodesList(): NodeModel[] {\r\n//     let nodes: NodeModel[] = [];\r\n//     let xMin = this.state.offsetLeft;\r\n//     let xMax = xMin + this.state.width;\r\n//     let yMin = this.state.offsetTop / this.state.scale;\r\n//     let yMax = yMin + this.state.height / this.state.scale;\r\n//     this.state.nodes.forEach(n => {\r\n//         if ((n.x + n.dimensions.width > xMin && n.x < xMax) &&\r\n//             ((n.y + n.height > yMin && n.y < yMax))) {\r\n//             nodes.push(n);\r\n//         }\r\n//     })\r\n//     return nodes;\r\n// }\r\n","C:\\Users\\Kamil\\WebstormProjects\\node-image-editor-react\\src\\node-components\\Link.tsx",[],"C:\\Users\\Kamil\\WebstormProjects\\node-image-editor-react\\src\\node-components\\Segment.tsx",[],"C:\\Users\\Kamil\\WebstormProjects\\node-image-editor-react\\src\\stories\\Button.tsx",[],"C:\\Users\\Kamil\\WebstormProjects\\node-image-editor-react\\src\\node-components\\Node.tsx",[],"C:\\Users\\Kamil\\WebstormProjects\\node-image-editor-react\\src\\node-components\\NodeValueFunction.ts",[],"C:\\Users\\Kamil\\WebstormProjects\\node-image-editor-react\\src\\node-components\\Port.tsx",[],"C:\\Users\\Kamil\\WebstormProjects\\node-image-editor-react\\src\\node-components\\LinkTemporary.tsx",[],["184","185"],"C:\\Users\\Kamil\\WebstormProjects\\node-image-editor-react\\src\\stories\\Page.tsx",[],"C:\\Users\\Kamil\\WebstormProjects\\node-image-editor-react\\src\\node-components\\complete-nodes\\ImageMixNode.ts",[],"C:\\Users\\Kamil\\WebstormProjects\\node-image-editor-react\\src\\modeules\\node-module\\NodeModule.tsx",[],"C:\\Users\\Kamil\\WebstormProjects\\node-image-editor-react\\src\\node-components\\complete-nodes\\OutputNodeModel.ts",[],"C:\\Users\\Kamil\\WebstormProjects\\node-image-editor-react\\src\\node-components\\complete-nodes\\ResizeNode.ts",[],"C:\\Users\\Kamil\\WebstormProjects\\node-image-editor-react\\src\\node-components\\segment-implementacions\\NumericSliderSegment.tsx",[],"C:\\Users\\Kamil\\WebstormProjects\\node-image-editor-react\\src\\node-components\\segment-implementacions\\InputSegment.tsx",[],"C:\\Users\\Kamil\\WebstormProjects\\node-image-editor-react\\src\\node-components\\segment-implementacions\\OutputSegment.tsx",[],"C:\\Users\\Kamil\\WebstormProjects\\node-image-editor-react\\src\\node-components\\segment-implementacions\\ImageSegment.tsx",["186"],"import React from 'react';\r\nimport Segment, {PortType, SegmentModel, SegmentProps} from \"../Segment\";\r\nimport \"./ImageSegment.css\"\r\nimport {nodeStyle, segmentStyle} from \"../Node\";\r\nimport {NodeStorage} from \"../../modeules/node-module/NodeStorage\";\r\nimport {NodeCanvasViewProperties} from \"../../modeules/node-module/NodeCanvasViewProperties\";\r\n\r\nexport class ImageSegmentState {\r\n    public file: File | null = null;\r\n    public imgSrc: string | null = null;\r\n}\r\n\r\nexport class ImageSegment extends Segment<ImageData | null, SegmentProps<ImageData | null>, ImageSegmentState> {\r\n    constructor(props: SegmentProps<ImageData | null>) {\r\n        super(props);\r\n        this.state = new ImageSegmentState();\r\n    }\r\n\r\n    handleValueChange = (event: any) => {\r\n        let reader = new FileReader();\r\n        reader.onload = () => {\r\n            let img = new Image();\r\n            img.onload = () => {\r\n                this.setState({imgSrc: img.src});\r\n                let canvas = document.createElement(\"canvas\");\r\n                canvas.height = img.height;\r\n                canvas.width = img.width;\r\n                let ctx = canvas.getContext(\"2d\");\r\n                if (ctx !== null) {\r\n                    ctx.drawImage(img, 0, 0);\r\n                    this.props.segment.value = ctx.getImageData(0, 0, img.width, img.height);\r\n                }\r\n            }\r\n\r\n            if (typeof reader.result === \"string\") {\r\n                img.src = reader.result;\r\n            }\r\n        }\r\n\r\n        try {\r\n            reader.readAsDataURL(event.target.files[0]);\r\n        } catch (e) {\r\n            this.setState({imgSrc: null});\r\n        }\r\n        this.setState({file: event.target.files[0]});\r\n    }\r\n\r\n    createWrapperStyle() {\r\n\r\n    }\r\n\r\n    createInputStyle() {\r\n        let dim = this.props.segment.parentDimensions;\r\n        return {\r\n            position: \"absolute\",\r\n            top: this.topPosition,\r\n            paddingRight: \"6px\",\r\n            width: dim.width * (1 - 2 * segmentStyle.percentageOffsetLeft) - 6,\r\n            height: dim.segmentHeight * (1 - 2 * segmentStyle.percentageOffsetTop),\r\n            marginLeft: dim.width * segmentStyle.percentageOffsetLeft,\r\n            marginTop: dim.segmentHeight * segmentStyle.percentageOffsetTop,\r\n            color: nodeStyle.color,\r\n            fontSize: dim.segmentHeight * segmentStyle.fontSizeToSegmentHeight,\r\n            userSelect: \"none\"\r\n        } as React.CSSProperties;\r\n    }\r\n\r\n    createLabelStyle() {\r\n        let dim = this.props.segment.parentDimensions;\r\n        return {\r\n            position: \"absolute\",\r\n            top: this.topPosition,\r\n            width: dim.width * (1 - 2 * segmentStyle.percentageOffsetLeft) - 6,\r\n            height: dim.segmentHeight * (1 - segmentStyle.percentageOffsetTop),\r\n            paddingLeft: \"6px\",\r\n            borderRadius: dim.segmentHeight / 2,\r\n            backgroundColor: nodeStyle.segmentColor,\r\n            marginLeft: dim.width * segmentStyle.percentageOffsetLeft,\r\n            marginTop: dim.segmentHeight * segmentStyle.percentageOffsetTop,\r\n            overflow: \"hidden\",\r\n\r\n            textAlign: \"left\",\r\n            whiteSpace: \"nowrap\",\r\n            color: nodeStyle.color,\r\n            fontSize: dim.segmentHeight * segmentStyle.fontSizeToSegmentHeight\r\n        } as React.CSSProperties\r\n    }\r\n\r\n    createCanvasStyle() {\r\n        let dim = this.props.segment.parentDimensions;\r\n        return {\r\n            position: \"absolute\",\r\n            top: this.topPosition + dim.segmentHeight,\r\n            height: dim.segmentHeight * 2 * (1 - segmentStyle.percentageOffsetTop),\r\n            width: this.width\r\n        } as React.CSSProperties;\r\n    }\r\n\r\n    render() {\r\n        let dim = this.props.segment.parentDimensions;\r\n        return (\r\n            <div>\r\n                <input onChange={this.handleValueChange} className={\"fileInput\"} type=\"file\" accept=\"image/*\"\r\n                       style={this.createInputStyle()}/>\r\n                <label className={\"fileLabel\"} style={this.createLabelStyle()}>\r\n                    🖿 {(this.state.file === null || this.state.file === undefined) ?\r\n                    this.props.segment.label : this.state.file.name}\r\n                </label>\r\n\r\n                {this.createPort()}\r\n\r\n                {this.state.imgSrc !== null ?\r\n                    <div style={{\r\n                        position: \"absolute\", top: this.topPosition + dim.segmentHeight, left: this.offsetLeft,\r\n                        width: this.width, height: dim.segmentHeight * 4 * (1 - segmentStyle.percentageOffsetTop),\r\n                        maxWidth: this.width, maxHeight: dim.segmentHeight * 4 * (1 - segmentStyle.percentageOffsetTop),\r\n                        pointerEvents: \"none\"\r\n                    }}>\r\n                        <img style={{\r\n                            maxWidth: \"inherit\", maxHeight: \"inherit\",\r\n                            display: \"block\", marginLeft: \"auto\", marginRight: \"auto\"\r\n                        }} src={this.state.imgSrc}/>\r\n                    </div>\r\n                    :\r\n                    <div/>\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport class ImageSegmentModel extends SegmentModel<ImageData | null> {\r\n\r\n    constructor(label: string, value: ImageData | null, portType: PortType) {\r\n        super(label, value, portType, 5);\r\n    }\r\n\r\n    createView(storage: NodeStorage, currentScale: NodeCanvasViewProperties): JSX.Element {\r\n        return <ImageSegment currentScale={currentScale} storage={storage} segment={this} key={this.index}/>;\r\n    }\r\n}","C:\\Users\\Kamil\\WebstormProjects\\node-image-editor-react\\src\\modeules\\node-module\\RenderWindow.tsx",[],"C:\\Users\\Kamil\\WebstormProjects\\node-image-editor-react\\src\\node-components\\segment-implementacions\\OptionSegment.tsx",[],"C:\\Users\\Kamil\\WebstormProjects\\node-image-editor-react\\src\\modeules\\node-module\\NodeControlPanel.tsx",[],"C:\\Users\\Kamil\\WebstormProjects\\node-image-editor-react\\src\\node-components\\complete-nodes\\CompleteNodeList.ts",[],"C:\\Users\\Kamil\\WebstormProjects\\node-image-editor-react\\src\\node-components\\segment-implementacions\\NumberSegment.tsx",["187"],"import React from 'react';\r\nimport Segment, {PortType, SegmentModel, SegmentProps} from \"../Segment\";\r\nimport {CurrentScale} from \"../../modeules/node-module/NodeCanvas\";\r\nimport {nodeStyle, segmentStyle} from \"../Node\";\r\nimport \"./NumberSegment.css\"\r\nimport {NodeStorage} from \"../../modeules/node-module/NodeStorage\";\r\n\r\nexport class NumberSegment extends Segment<number, SegmentProps<number>, { active: boolean }> {\r\n    private numberInputRef = React.createRef<HTMLInputElement>();\r\n\r\n    constructor(props: SegmentProps<number>) {\r\n        super(props);\r\n        this.state = {active: false}\r\n    }\r\n\r\n    handleChange = (event: any) => {\r\n        this.props.segment.value = event.target.value;\r\n    }\r\n\r\n    createInputStyle() {\r\n        let dim = this.props.segment.parentDimensions;\r\n        return {\r\n            position: \"absolute\",\r\n            padding: 0,\r\n            border: 0,\r\n            paddingLeft: \"6px\",\r\n            paddingRight: \"6px\",\r\n            top: this.topPosition,\r\n            marginTop: this.offsetTop,\r\n            left: this.offsetLeft,\r\n            height: this.height,\r\n            width: this.width - 12,\r\n            borderRadius: dim.segmentHeight / 2,\r\n            backgroundColor: nodeStyle.segmentColor,\r\n\r\n            fontFamily: nodeStyle.fontFamily,\r\n            textAlign: \"center\",\r\n            fontWeight: nodeStyle.labelsFontSize,\r\n            fontSize: segmentStyle.fontSizeToSegmentHeight * this.props.segment.parentDimensions.segmentHeight,\r\n            color: nodeStyle.color\r\n        } as React.CSSProperties;\r\n    }\r\n\r\n    createDummyInputStyle() {\r\n        return {\r\n            position: \"absolute\",\r\n            padding: 0,\r\n            border: 0,\r\n            paddingLeft: \"6px\",\r\n            paddingRight: \"6px\",\r\n            top: this.topPosition,\r\n            marginTop: this.offsetTop,\r\n            left: this.offsetLeft,\r\n            height: this.height,\r\n            width: this.width - 12,\r\n            borderRadius: this.height / 2,\r\n            backgroundColor: nodeStyle.segmentColor,\r\n\r\n            fontFamily: nodeStyle.fontFamily,\r\n            textAlign: \"center\",\r\n            fontWeight: nodeStyle.labelsFontSize,\r\n            fontSize: segmentStyle.fontSizeToSegmentHeight * this.props.segment.parentDimensions.segmentHeight,\r\n            color: nodeStyle.color,\r\n            userSelect: \"none\",\r\n\r\n            display: \"flex\",\r\n            justifyContent: \"center\",\r\n            alignItems: \"center\",\r\n        } as React.CSSProperties\r\n    }\r\n\r\n    createSpanStyle(isLeft: boolean) {\r\n        return {\r\n            position: \"absolute\",\r\n            top: this.topPosition,\r\n            marginTop: this.offsetTop,\r\n            marginLeft: this.offsetLeft\r\n        } as React.CSSProperties;\r\n    }\r\n\r\n    activateClick = (event: any) => {\r\n        const box = event.target.getBoundingClientRect();\r\n        this.setState({active: true});\r\n\r\n        setTimeout(() => {\r\n            if (this.numberInputRef.current) {\r\n                let input = this.numberInputRef.current;\r\n                input.focus();\r\n            }\r\n        }, 10);\r\n\r\n        const deactivate = (event: any) => {\r\n            if (event.clientX > box.left + box.width || event.clientX < box.left ||\r\n                event.clientY > box.top + box.height || event.clientY < box.top) {\r\n                this.setState({active: false});\r\n                window.removeEventListener(\"mousedown\", deactivate);\r\n            }\r\n        }\r\n\r\n        window.addEventListener(\"mousedown\", deactivate);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className={\"NumberSegment\"}>\r\n\r\n                {this.state.active ?\r\n                    <input ref={this.numberInputRef} onChange={this.handleChange} type={\"number\"}\r\n                           style={this.createInputStyle()}\r\n                           defaultValue={this.props.segment.value} disabled={!this.state.active}/>\r\n                    :\r\n                    <div onMouseDown={this.activateClick}\r\n                         style={this.createDummyInputStyle()}>{this.props.segment.value}</div>\r\n                }\r\n\r\n                {/*<textarea style={this.createStyle()}>{this.props.segment.value}</textarea>*/}\r\n                <span style={this.createInputLabelStyle()}>⮜</span>\r\n                <span style={this.createOutputLabelStyle()}>⮞</span>\r\n                {this.createPort()}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport class NumberSegmentModel extends SegmentModel<number> {\r\n\r\n    constructor(label: string, value: number, portType: PortType) {\r\n        super(label, value, portType);\r\n    }\r\n\r\n    createView(storage: NodeStorage, currentScale: CurrentScale): JSX.Element {\r\n        return <NumberSegment key={this.index} segment={this} storage={storage} currentScale={currentScale}/>;\r\n    }\r\n\r\n}\r\n\r\nexport default NumberSegment;","C:\\Users\\Kamil\\WebstormProjects\\node-image-editor-react\\src\\App.tsx",[],"C:\\Users\\Kamil\\WebstormProjects\\node-image-editor-react\\src\\components\\Button.tsx",[],"C:\\Users\\Kamil\\WebstormProjects\\node-image-editor-react\\src\\components\\UnfoldingButton.tsx",[],"C:\\Users\\Kamil\\WebstormProjects\\node-image-editor-react\\src\\node-components\\complete-nodes\\NodeFactory.ts",[],"C:\\Users\\Kamil\\WebstormProjects\\node-image-editor-react\\src\\components\\Navbar.tsx",[],"C:\\Users\\Kamil\\WebstormProjects\\node-image-editor-react\\src\\index.tsx",[],"C:\\Users\\Kamil\\WebstormProjects\\node-image-editor-react\\src\\reportWebVitals.ts",[],"C:\\Users\\Kamil\\WebstormProjects\\node-image-editor-react\\src\\node-components\\complete-nodes\\ImageInputNode.ts",["188"],"import {NodeDimension, NodeModel} from \"../Node\";\r\nimport {OutputSegmentModel} from \"../segment-implementacions/OutputSegment\";\r\nimport {ImageSegmentModel} from \"../segment-implementacions/ImageSegment\";\r\nimport {PortType} from \"../Segment\";\r\nimport {NodeValueFunction} from \"../NodeValueFunction\";\r\n\r\nexport const CreateImageInputNode = (id: number, x?: number, y?: number): NodeModel => {\r\n    let node = new NodeModel(id, \"Image input\", x ? x : 0, y ? y : 0,\r\n        new NodeDimension(180, 20, 26, 20),\r\n        new ImageInputNodeVFun());\r\n    node.addSegment(new OutputSegmentModel(\"image\"));\r\n    // node.addSegment(new OutputSegmentModel(\"alfa\"));\r\n    node.addSegment(new ImageSegmentModel(\"Load input image\", null, PortType.NO_PORT))\r\n    return node;\r\n}\r\n\r\nclass ImgWrapper {\r\n    public imgData: ImageData | null;\r\n\r\n    constructor(imgData: ImageData | null) {\r\n        this.imgData = imgData;\r\n    }\r\n}\r\n\r\nexport class ImageInputNodeVFun implements NodeValueFunction<ImageData> {\r\n\r\n    getNodeValue(node: NodeModel, segmentIndex: number): ImageData {\r\n        if (node.segments[1].value instanceof ImageData) {\r\n            return node.segments[1].value;\r\n        } else {\r\n            throw new Error(\"\");\r\n        }\r\n    }\r\n}\r\n","C:\\Users\\Kamil\\WebstormProjects\\node-image-editor-react\\src\\node-components\\segment-implementacions\\PlaceholderSegment.tsx",["189"],"import React from 'react';\r\nimport Segment, {PortType, SegmentModel, SegmentProps} from \"../Segment\";\r\nimport {NodeStorage} from \"../../modeules/node-module/NodeStorage\";\r\nimport {NodeCanvasViewProperties} from \"../../modeules/node-module/NodeCanvasViewProperties\";\r\n\r\nclass PlaceholderSegment extends Segment<null, SegmentProps<null>, any> {\r\n    render() {\r\n        return (\r\n            <div/>\r\n        );\r\n    }\r\n}\r\n\r\nexport class PlaceholderSegmentModel extends SegmentModel<null> {\r\n\r\n    constructor() {\r\n        super(\"\", null, PortType.NO_PORT);\r\n    }\r\n\r\n    createView(storage: NodeStorage, currentScale: NodeCanvasViewProperties): JSX.Element {\r\n        return <PlaceholderSegment key={this.index} storage={storage} currentScale={currentScale} segment={this}/>;\r\n    }\r\n\r\n}\r\n\r\nexport default PlaceholderSegment;","C:\\Users\\Kamil\\WebstormProjects\\node-image-editor-react\\src\\node-components\\NodeModel.ts",["190"],"import {DummyValueFunction, NodeValueFunction} from \"./NodeValueFunction\";\r\nimport {PortType, SegmentModel} from \"./Segment\";\r\nimport {LinkModel} from \"./Link\";\r\nimport {PlaceholderSegmentModel} from \"./segment-implementacions/PlaceholderSegment\";\r\n\r\nexport class SegmentStyle {\r\n    public percentageOffsetTop: number = 0.15;\r\n    public percentageOffsetLeft: number = 0.08;\r\n    public fontSizeToSegmentHeight: number = 0.55;\r\n}\r\n\r\nexport class NodeStyle {\r\n    public allowHeaderColorOverwriting: boolean = false;\r\n    public allowPortColorOverwriting: boolean = false;\r\n    public nodeBackgroundColor: string = \"#54606d\";\r\n    public headerColor: string = \"#299b91\";\r\n    public borderColor: string = \"#334447\";\r\n    public segmentColor: string = \"#3c454f\";\r\n    public inputPortColor: string = \"#299b91\";\r\n    public outputPortColor: string = \"#299b91\";\r\n    public textColor: string = \"#f7f7f7\";\r\n\r\n    public fontFamily: string = \"Ubuntu, sans-serif\";\r\n    public headerFontWeight: number = 400;\r\n    public labelsFontWeight: number = 300;\r\n\r\n    public segmentStyle = new SegmentStyle();\r\n}\r\n\r\nexport class NodeDimension {\r\n    private _width: number;\r\n    private _headHeight: number;\r\n    private _segmentHeight: number;\r\n    private _footerHeight: number;\r\n\r\n    constructor(width: number, headHeight: number, segmentHeight: number, stopperHeight: number) {\r\n        this._width = width;\r\n        this._headHeight = headHeight;\r\n        this._segmentHeight = segmentHeight;\r\n        this._footerHeight = stopperHeight;\r\n    }\r\n\r\n    get width(): number {\r\n        return this._width;\r\n    }\r\n\r\n    set width(value: number) {\r\n        this._width = value;\r\n    }\r\n\r\n    get headHeight(): number {\r\n        return this._headHeight;\r\n    }\r\n\r\n    set headHeight(value: number) {\r\n        this._headHeight = value;\r\n    }\r\n\r\n    get segmentHeight(): number {\r\n        return this._segmentHeight;\r\n    }\r\n\r\n    set segmentHeight(value: number) {\r\n        this._segmentHeight = value;\r\n    }\r\n\r\n    get footerHeight(): number {\r\n        return this._footerHeight;\r\n    }\r\n\r\n    set footerHeight(value: number) {\r\n        this._footerHeight = value;\r\n    }\r\n}\r\n\r\nexport class NodeViewProperties {\r\n    private _selected: boolean = false;\r\n    private _rolledUp: boolean = false;\r\n    private readonly _nodeStyle: NodeStyle = defaultNodeStyle;\r\n    private readonly _dimensions: NodeDimension;\r\n    private _x: number;\r\n    private _y: number;\r\n\r\n\r\n    constructor(nodeStyle: NodeStyle, dimensions: NodeDimension, x: number, y: number) {\r\n        this._nodeStyle = nodeStyle;\r\n        this._dimensions = dimensions;\r\n        this._x = x;\r\n        this._y = y;\r\n    }\r\n\r\n    get dimensions(): NodeDimension {\r\n        return this._dimensions;\r\n    }\r\n\r\n    get selected(): boolean {\r\n        return this._selected;\r\n    }\r\n\r\n    set selected(value: boolean) {\r\n        this._selected = value;\r\n    }\r\n\r\n    get nodeStyle(): NodeStyle {\r\n        return this._nodeStyle;\r\n    }\r\n\r\n    get x(): number {\r\n        return this._x;\r\n    }\r\n\r\n    set x(value: number) {\r\n        this._x = value;\r\n    }\r\n\r\n    get y(): number {\r\n        return this._y;\r\n    }\r\n\r\n    set y(value: number) {\r\n        this._y = value;\r\n    }\r\n\r\n    get rolledUp(): boolean {\r\n        return this._rolledUp;\r\n    }\r\n\r\n    set rolledUp(value: boolean) {\r\n        this._rolledUp = value;\r\n    }\r\n}\r\n\r\nexport class NodeModel {\r\n    public readonly id: number;\r\n    public readonly name: string;\r\n    private readonly _valueFunction: NodeValueFunction<any> = new DummyValueFunction();\r\n    private readonly _viewProperties: NodeViewProperties;\r\n    private _segments: SegmentModel<any>[] = [];\r\n    private _links: LinkModel[] = [];\r\n\r\n    constructor(id: number, name: string,\r\n                x: number, y: number,\r\n                dimensions: NodeDimension,\r\n                valueFunction: NodeValueFunction<any>,\r\n                nodeStyle?: NodeStyle,\r\n                segments?: SegmentModel<any>[],) {\r\n        this.id = id;\r\n        this.name = name;\r\n\r\n        this._viewProperties = new NodeViewProperties(\r\n            nodeStyle ? nodeStyle : defaultNodeStyle,\r\n            dimensions, x, y);\r\n\r\n        if (segments != null) {\r\n            segments.forEach(s => this.addSegment(s));\r\n        }\r\n\r\n        if (valueFunction != null) {\r\n            this._valueFunction = valueFunction;\r\n        }\r\n    }\r\n\r\n    addSegment(segment: SegmentModel<any>) {\r\n        if (!segment.isInitialized) {\r\n            segment.initialize(this, this._segments.length, this.dimensions);\r\n            this._segments.push(segment);\r\n            if (segment.spacesOccupied > 1) {\r\n                for (let i = 0; i < segment.spacesOccupied - 1; i++) {\r\n                    let temp = new PlaceholderSegmentModel();\r\n                    temp.initialize(this, this._segments.length, this.dimensions);\r\n                    this._segments.push(temp);\r\n                }\r\n            }\r\n        } else {\r\n            throw new Error(\"Segment can belong only to one Node\");\r\n        }\r\n    }\r\n\r\n    addLink(link: LinkModel) {\r\n        this._links.push(link);\r\n    }\r\n\r\n    removeLink(link: LinkModel) {\r\n        // debugger;\r\n        let links = this.links.filter(e => e !== null);\r\n        for (let i = 0; i < links.length; i++) {\r\n            if (links[i].equals(link)) {\r\n                delete links[i];\r\n                break;\r\n            }\r\n        }\r\n        links = links.filter(e => e !== null && e !== undefined);\r\n        this._links = links;\r\n    }\r\n\r\n    getNodeValue(outputIndex: number): any {\r\n        return this._valueFunction.getNodeValue(this, outputIndex);\r\n    }\r\n\r\n    getSegmentLinks(segmentIndex: number): LinkModel[] {\r\n        let segmentLinks: LinkModel[] = [];\r\n        if (this._segments[segmentIndex].portType === PortType.OUTPUT) {\r\n            this._links.forEach(l => {\r\n                if (l.outputSegment.index === segmentIndex) {\r\n                    segmentLinks.push(l);\r\n                }\r\n            })\r\n        } else if (this._segments[segmentIndex].portType === PortType.INPUT) {\r\n            this._links.forEach(l => {\r\n                if (l.inputSegment.index === segmentIndex) {\r\n                    segmentLinks.push(l);\r\n                }\r\n            })\r\n        }\r\n\r\n        return segmentLinks\r\n    }\r\n\r\n    checkIfPointInsideNode(x: number, y: number): boolean {\r\n        let viewProps = this._viewProperties;\r\n        let dim = this._viewProperties.dimensions;\r\n        return x > viewProps.x && x < viewProps.x + dim.width &&\r\n            y > viewProps.y && y < viewProps.y + this.height;\r\n    }\r\n\r\n    get outputLinkNumber(): number {\r\n        let i = 0;\r\n        this._links.forEach(l => i = l.outputSegment.parent.id === this.id ? i + 1 : i);\r\n        return i;\r\n    }\r\n\r\n    get links(): LinkModel[] {\r\n        return this._links;\r\n    }\r\n\r\n    get x(): number {\r\n        return this._viewProperties.x;\r\n    }\r\n\r\n    set x(value: number) {\r\n        this._viewProperties.x = value;\r\n    }\r\n\r\n    get y(): number {\r\n        return this._viewProperties.y;\r\n    }\r\n\r\n    set y(value: number) {\r\n        this._viewProperties.y = value;\r\n    }\r\n\r\n    get dimensions(): NodeDimension {\r\n        return this._viewProperties.dimensions;\r\n    }\r\n\r\n    get height(): number {\r\n        let dim = this._viewProperties.dimensions;\r\n        return dim.headHeight + dim.footerHeight +\r\n            this.segments.length * dim.segmentHeight;\r\n    }\r\n\r\n    get segments(): SegmentModel<any>[] {\r\n        return this._segments;\r\n    }\r\n\r\n    get nodeStyle(): NodeStyle {\r\n        return this._viewProperties.nodeStyle;\r\n    }\r\n\r\n    get style(): NodeStyle {\r\n        return this._viewProperties.nodeStyle;\r\n    }\r\n\r\n    get viewProperties(): NodeViewProperties {\r\n        return this._viewProperties;\r\n    }\r\n}\r\n\r\nexport const defaultNodeStyle = new NodeStyle();\r\n",{"ruleId":"191","replacedBy":"192"},{"ruleId":"193","replacedBy":"194"},{"ruleId":"195","severity":1,"message":"196","line":8,"column":9,"nodeType":"197","messageId":"198","endLine":8,"endColumn":30},{"ruleId":"199","severity":1,"message":"200","line":6,"column":1,"nodeType":"201","endLine":43,"endColumn":2},{"ruleId":"191","replacedBy":"202"},{"ruleId":"193","replacedBy":"203"},{"ruleId":"204","severity":1,"message":"205","line":237,"column":56,"nodeType":"206","messageId":"207","endLine":237,"endColumn":58},{"ruleId":"208","severity":1,"message":"209","line":50,"column":13,"nodeType":"210","endLine":50,"endColumn":38},{"ruleId":"208","severity":1,"message":"209","line":52,"column":13,"nodeType":"210","endLine":52,"endColumn":38},{"ruleId":"208","severity":1,"message":"209","line":72,"column":9,"nodeType":"210","endLine":72,"endColumn":34},{"ruleId":"191","replacedBy":"211"},{"ruleId":"193","replacedBy":"212"},{"ruleId":"213","severity":1,"message":"214","line":121,"column":25,"nodeType":"215","endLine":131,"endColumn":53},{"ruleId":"216","severity":1,"message":"217","line":127,"column":5,"nodeType":"218","messageId":"219","endLine":129,"endColumn":6},{"ruleId":"195","severity":1,"message":"220","line":17,"column":7,"nodeType":"197","messageId":"198","endLine":17,"endColumn":17},{"ruleId":"195","severity":1,"message":"221","line":1,"column":16,"nodeType":"197","messageId":"198","endLine":1,"endColumn":25},{"ruleId":"222","severity":1,"message":"223","line":79,"column":46,"nodeType":"197","messageId":"224","endLine":79,"endColumn":62},"no-native-reassign",["225"],"no-negated-in-lhs",["226"],"@typescript-eslint/no-unused-vars","'CreateResizeImageNode' is defined but never used.","Identifier","unusedVar","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration",["225"],["226"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","react/no-direct-mutation-state","Do not mutate state directly. Use setState().","MemberExpression",["225"],["226"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","@typescript-eslint/no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","'ImgWrapper' is defined but never used.","'Component' is defined but never used.","@typescript-eslint/no-use-before-define","'defaultNodeStyle' was used before it was defined.","noUseBeforeDefine","no-global-assign","no-unsafe-negation"]